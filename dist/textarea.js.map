{"version":3,"file":"textarea.js","sources":["../src/InputWrapper.tsx","../src/FormattedText.tsx","../src/Textarea.tsx"],"sourcesContent":["// @ts-ignore\nimport * as React from 'react';\n\nexport interface Props {\n  style?: { [propName: string]: string };\n}\n\nconst wrapper: React.SFC<Props> = ({ children, style = {} }) => (\n  <div\n    style={{\n      border: '1px solid #ddd',\n      borderTop: '0px',\n      borderRadius: '5px',\n      borderTopLeftRadius: '0px',\n      borderTopRightRadius: '0px',\n      padding: '10px',\n      backgroundColor: '#fff',\n      textAlign: 'left',\n      ...style,\n    }}\n  >\n    {children}\n  </div>\n);\n\nexport default wrapper;\n","import * as React from 'react';\nimport { default as ReactMarkdown } from 'react-markdown';\nimport { default as xss } from 'xss';\n\nexport interface FilterInput {\n  value: string;\n  whiteList?: { [propName: string]: string[] };\n}\n\nexport interface Props extends FilterInput {\n  allowFilteredHtml: boolean;\n}\n\nexport default class FormattedText extends React.PureComponent<Props> {\n  static filterXss({ value, whiteList = {\n    source: ['src', 'type'],\n    img: ['src', 'alt', 'title', 'width', 'height', 'style'],\n    video: [\n      'autoplay', 'controls', 'loop',\n      'preload', 'src', 'height',\n      'width', 'style',\n    ],\n  }}: FilterInput): string {\n    const options = {\n      whiteList: {\n        ...xss.getDefaultWhiteList(),\n        ...whiteList,\n      },\n      stripIgnoreTagBody: ['script'], // the script tag is a special case, we need\n      // to filter out its content\n    };\n    return xss(value, options);\n  }\n\n  render() {\n    const {\n      value,\n      allowFilteredHtml = false,\n      whiteList,\n    } = this.props;\n\n    if (typeof value !== 'string') return null;\n\n    if (allowFilteredHtml && value.indexOf('<') === 0) {\n      const filteredContent = FormattedText.filterXss({ value, whiteList });\n      return (<div dangerouslySetInnerHTML={{ __html: filteredContent }} />);\n    }\n\n    return (\n      <ReactMarkdown\n        source={value}\n        escapeHtml={false}\n      />);\n  }\n}\n","import * as React from 'react';\nimport {\n  Input, InputProps,\n  Nav, NavItem, NavLink,\n  TabContent, TabPane,\n} from 'reactstrap';\nimport InputWrapper from './InputWrapper';\nimport { default as FormattedText } from './FormattedText';\n\nexport interface State {\n  showEdit: boolean;\n}\n\nexport interface Props extends InputProps {\n  value: string;\n  allowFilteredHtml?: boolean;\n  toggle?: boolean;\n  whiteList?: { [propName: string]: string[] };\n  rows?: number;\n  cols?: number;\n}\n\nclass MdTextarea extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  state = {\n    showEdit: true,\n  };\n\n  toggle(show: boolean = !this.state.showEdit) {\n    this.setState({ showEdit: show });\n  }\n\n  handleToggle() {\n    this.toggle();\n  }\n\n  renderTextarea() {\n    const { type, allowFilteredHtml, whiteList, ...other } = this.props;\n    return (\n      <Input\n        type=\"textarea\"\n        {...other}\n      />);\n  }\n\n  renderTabs() {\n    const { id, value, toggle, allowFilteredHtml = false } = this.props;\n    return (\n      <React.Fragment>\n        <Nav tabs={true} key=\"Nav\">\n          <NavItem>\n            <NavLink\n              active={this.state.showEdit}\n              onClick={toggle ? this.handleToggle : () => { this.toggle(true); }}\n            >\n              Edit\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              active={!this.state.showEdit}\n              onClick={toggle ? this.handleToggle : () => { this.toggle(false); }}\n            >\n              Preview\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent\n          key=\"Content\"\n          id={`tabpane_${id}`}\n          activeTab={this.state.showEdit ? 'Edit' : 'Preview'}\n        >\n          <TabPane tabId=\"Edit\">\n            <InputWrapper>\n              {allowFilteredHtml &&\n                <p>\n                  You can input markdown or html (start with &lt; to indicate html)\n                  for styling the text.\n                </p>\n              }\n              {this.renderTextarea()}\n            </InputWrapper>\n          </TabPane>\n          <TabPane tabId=\"Preview\">\n            <InputWrapper>\n              <FormattedText {...{ value, allowFilteredHtml }} />\n            </InputWrapper>\n          </TabPane>\n        </TabContent>\n      </React.Fragment>\n    );\n  }\n\n  getFilteredValue() {\n    const { value, whiteList } = this.props;\n    return FormattedText.filterXss({ value, whiteList });\n  }\n\n  render() {\n    const { type } = this.props;\n    if (type && ['text', 'textarea'].includes(type.toLowerCase())) {\n      return this.renderTextarea();\n    }\n\n    return this.renderTabs();\n  }\n}\n\nexport default MdTextarea;\n"],"names":["React.createElement","tslib_1.__extends","React.PureComponent","Input","React.Fragment","Nav","NavItem","NavLink","TabContent","TabPane","InputWrapper","React.Component"],"mappings":"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"}